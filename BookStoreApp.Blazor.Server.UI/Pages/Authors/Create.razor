@page "/authors/create/"
@inject IClient httpClient
@inject IAuthorService authorService
@inject NavigationManager navManager

<h3>Create New Authoer</h3>

<EditForm Model="Author" OnInvalidSubmit="HandleCreateAuthor">
    <DataAnnotationsValidator />
        <ValidationSummary />
    <div class="form-group">
        <label for="firstname">First Name</label>
        <InputText class="form-control" @bind-Value="Author.FirstName" id="firstname" />
        <ValidationMessage For="@(() => Author.FirstName)" />
    </div>
    <div class="form-group">
        <label for="lastname">Last Name</label>
        <InputText class="form-control" @bind-Value="Author.LastName" id="lastname" />
        <ValidationMessage For="@(() => Author.LastName)" />
    </div>
    <div class="form-group">
        <label for="bio">Biography</label>
        <InputText class="form-control" @bind-Value="Author.Bio" id="bio"/>
        <ValidationMessage For="@(() => Author.Bio)" />
    </div>
    <button type="submit" class="btn btn-primary btn-block"><span class="io io-pencil"></span> Create Author</button>
    <button @onclick="BackToList" type="submit" class="btn btn-secondary"><span class="oi oi-media-skip-backward"></span> Back To List</button>


</EditForm>

@code {
    private AuthorCreateDto Author = new AuthorCreateDto();

    private async Task HandleCreateAuthor()
    {
        var response = await authorService.CreateAuthor(Author);
        if (response.Success)
        {
            BackToList();
        }
    }

    private void BackToList()
    {
        navManager.NavigateTo("/authors/");
    }

}
